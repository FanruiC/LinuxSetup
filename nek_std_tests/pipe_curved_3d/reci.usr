c-----------------------------------------------------------------------
c  nek5000 user-file template
c
c  user specified routines:
c     - uservp  : variable properties
c     - userf   : local acceleration term for fluid
c     - userq   : local source term for scalars
c     - userbc  : boundary conditions
c     - useric  : initial conditions
c     - userchk : general purpose routine for checking errors etc.
c     - userqtl : thermal divergence for lowMach number flows 
c     - usrdat  : modify element vertices 
c     - usrdat2 : modify mesh coordinates
c     - usrdat3 : general purpose routine for initialization
c     
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties

c      implicit none

      integer ix,iy,iz,eg
     
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      udiff  = 0.0
      utrans = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      ffx = 0.1*(ux-ux)
      ffy = 0.1*(uy-0.99*uy)
      ffz = 0.1*(uz-0.99*uz)

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
c
c     NOTE ::: This subroutine MAY NOT be called by every process
c
      implicit none

      integer ix,iy,iz,iside,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      if (cbu .eq.'v  ') then
        ux = cos(time)
        uy = 0.0
        uz = 0.0
      endif
      
      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()

      implicit none

      include 'SIZE'
      include 'TOTAL'
      ! for turb outflow
      common /myoutflow/ d(lx1,ly1,lz1,lelt),m1(lx1*ly1*lz1,lelt)
      real m1, uin, rq, d

      ! for myspline
      integer sp_max, ntot
      parameter(sp_max=10)

      real sp_time(sp_max),
     $ sp_u(lx1, ly1, lz1, lelt, sp_max), 
     $ sp_v(lx1, ly1, lz1, lelt, sp_max),
     $ sp_w(lx1, ly1, lz1, lelt, sp_max)
      common /myspline/ sp_u, sp_v, sp_w, sp_time
      
      sp_time(5) = 5.555
      sp_time(6) = 6.666

      ntot = lx1*ly1*lz1*lelt 
      call myspline_copy(sp_u, vx, ntot, istep+1)
      call myspline_copy(sp_v, vy, ntot, 2)
      call myspline_copy(sp_w, vz, ntot, 2)

      !lelt:509
      if (nio .eq. 0) then
        write(6,*) 'istep=', istep, 'crrent-time=', time
        write(6,*) 'sp_time=', sp_time(5), sp_time(6)
        write(6,*) 'sp_u=', sp_u(1,1,1,1,istep+1)
        write(6,*) 'ntot=', ntot
        write(6,*) 'size', size(sp_u)
        write(6,*) 'dt=', dt
      endif
c--------------
      rq  = 2.0
      uin = 0.0
      call turb_outflow(d,m1,rq,uin)

      if (mod(istep, iostep) .eq. 0) then
            call hpts()
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      call userqtl_scig 

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices

      implicit none

      include 'SIZE'
      include 'TOTAL'

      integer iside,ie
      
      do ie=1, nelv
        do iside=1, 2*ldim
          cbc(iside,ie,1) = "E  "
          if(boundaryID(iside,ie) .eq. 501) then
            cbc(iside,ie,1) = "v  "
          elseif(boundaryID(iside,ie) .eq. 502) then
            cbc(iside,ie,1) = "O "
          elseif(boundaryID(iside,ie) .eq. 503) then
            cbc(iside,ie,1) = "W  "
          endif
        enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()

c      implicit none

      include 'SIZE'
      include 'TOTAL'
      return
      end
c-----------------------------------------------------------------------
      subroutine myspline_copy(a, b, n, row)
      implicit none
      integer i, n, row
      real a(*), b(*)

      do i=1,n
         a(i+(row-1)*n) = b(i)
      enddo

      return
      end
c-----------------------------------------------------------------------
      ! include 'include_test.f'
c-----------------------------------------------------------------------     
